#!/bin/bash

# Copyright (C) 2013-2014 MatÄ›j Cepl <mcepl@cepl.eu>
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall
# be included in all copies or substantial portions of the
# Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
# ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.


function digitalRoot() {
    # Requires on input a string
    # JavaScript equivalent (for copmarison):
    # 
    # function digitalRoot(inNo) {
    #   var cipher_sum = Array.reduce(inNo, function(prev, cur) {
    #     return prev + cur.charCodeAt(0);
    #   }, 0);
    # 
    #   return cipher_sum % 10;
    # }

    sum=0
    n=$1
    i=0

    while [ $i -lt ${#n} ] ; do
        ord=$(echo -n ${n:$i:1}|od -An -td|tr -d '[:blank:]')
        sum=$(( $sum + $ord )) # calculate sum of digit
        i=$(( $i + 1 ))
    done

    sum=$(( $sum % 10 ))
}

echo 

tempfile="$(mktemp)"

name="$1"

if [ -z "$name" ]; then
    echo "ERROR: Must provide a name"
    exit 1
fi

type="$2"
case "$type" in
    totp)
        tokentype="totp"
        tokenID="HOTP/T30"
    ;;
    hotp)
        tokentype="hotp"
        tokenID="HOTP"
    ;;
    *)
        echo "Bad or no token type specified, using TOTP"
        tokentype="totp"
        tokenID="HOTP/T30"
    ;;
esac

# Old method
#secretkey="$(dd if=/dev/urandom bs=1M count=1 2> /dev/null | sha512sum | cut -d' ' -f1 | cut -c1-40)"
# New method
secretkey="$(openssl rand -hex 20)"

# Paranoia Mode
#secretkey="$(openssl rand -hex 20 -rand /dev/random)"

b32key="$(echo -n "$secretkey" | python -c "import sys; import base64; import binascii; print base64.b32encode(binascii.unhexlify(sys.stdin.read()))")"

digitalRoot $b32key && b32checksum=$sum

echo "Key in Hex: $secretkey"
echo "Key in b32: $b32key (check: $b32checksum)"
qrencode -m 1 -s 1 "otpauth://$tokentype/$1?secret=$b32key" -o $tempfile

filesize="$(file $tempfile | cut -d, -f2 | cut -d' ' -f2)"

img2txt -H $filesize -W $(( $filesize * 2)) $tempfile

if [ "$tokentype" == "hotp" ]; then
    echo "NOTE: Make sure you're loading the yubikey config into the slot you want!"
    echo ""
    echo "Yubikey setup line (Slot 1):"
    echo "ykpersonalize -1 -ooath-hotp -ooath-imf=0 -ofixed= -oappend-cr -a$secretkey"
    echo "Yubikey setup line (Slot 2):"
    echo "ykpersonalize -2 -ooath-hotp -ooath-imf=0 -ofixed= -oappend-cr -a$secretkey"
fi

rm $tempfile
