#!/bin/env bash

# Copyright (C) 2016 Thomas Zink <tz@uni.kn>
# Copyright (C) 2013 Richard Monk <rmonk@redhat.com>
# Originally from
# https://post-office.corp.redhat.com/mailman/private/memo-list\
#    /2013-February/msg00116.html
# Copyright (C) 2013-2014 MatÄ›j Cepl <mcepl@cepl.eu>
# 
# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation
# files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use,
# copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following
# conditions:
# 
# The above copyright notice and this permission notice shall
# be included in all copies or substantial portions of the
# Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF
# ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED
# TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR
# A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT
# SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
# CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR
# IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

function digitalRoot() {
    # Requires an input a string
    # JavaScript equivalent (for comparison):
    # 
    # function digitalRoot(inNo) {
    #   var cipher_sum = Array.reduce(inNo, function(prev, cur) {
    #     return prev + cur.charCodeAt(0);
    #   }, 0);
    #   return cipher_sum % 10;
    # }

    local sum=0
    local n=$1
    local i=0
    
    while [ $i -lt ${#n} ] ; do
        ord=$(printf '%s' ${n:i:1} | od -An -td | tr -d '[:blank:]')
        sum=$(( sum + ord )) # calculate sum of digits
        i=$(( i + 1 ))
    done
    
    echo -n $(( sum % 10 ))
}

echo

# define variables
  name="$1"
issuer=''
domain=''

# set output type of qrcode for displaying on shell, use environment-variable if set
# [ ANSI ANSI256 ASCII ASCIIi UTF8 ANSIUTF8 ]
if [ -z "${qrtype}" ]; then
    qrtype=ANSI
fi

# check if "name" is defined or "help" is requested
if [ -z "$name" ] || [[ "$name" =~ (-h|--help)  ]]; then
	echo "usage: $0 username [tokentype] [secret]"
	echo ""
	echo "username: [issuer:]username[@[domain]]"
	echo "          using @ without domain uses"
	echo "          host's FQDN as domain"
	echo ""
	echo "Options:"
	echo "    tokentype: hotp | totp"
	echo "    secret: a hex encoded secret key"
	echo ""
    exit 1
fi

# get token type
type="$2"
case "$type" in
    totp)
        tokentype="totp"
        tokenID="HOTP/T30"
    ;;
    hotp)
        tokentype="hotp"
        tokenID="HOTP"
    ;;
    *)
        echo "INFO: Bad or no token type specified, using TOTP."
        tokentype="totp"
        tokenID="HOTP/T30"
    ;;
esac

# check for hexkey from user-input or generate a new one
hexkey="$3"
if [ -z "$hexkey" ]; then
	echo "INFO: No secret provided, generating random secret."
	
    # use openssl if existing, else use standard tools
    openssl="$(command -v openssl)"
    if [ -z "$openssl" ]; then
        hexkey="$(openssl rand 1024)"
    else
        hexkey="$(head -c 1024 /dev/urandom | tr -d '\0')"
    fi
    
    # create url-safe base32 with a length of 30 characters
    hexkey="$(printf '%s' $hexkey | base32 | tr -dc '[:alpha:][digit]' | od -tx1 -An | tr -d '[:space:]' | head -c 30 | tr -d '\n')"
fi

# check hexkey
if [[ ! "$hexkey" =~ ^[A-Fa-f0-9]*$ ]]; then
	echo "ERROR: Invalid secret, must be hex encoded."
	exit 1
fi

echo

# get base32 of hexkey
b32key="$(printf '%s' $hexkey | xxd -r -ps | base32)"

# calculate checksum using "repeated digital sum"
b32checksum=$(digitalRoot $b32key)

if [ -z $b32checksum ]; then
    echo "ERROR: Invalid secret, checksum cannot be calculated"
    exit 1
fi

# parse variable "name", set issuer if supplied
if [[ "$name" =~ ^(.*):(.*)$ ]]; then
	issuer=${BASH_REMATCH[1]}
	name=${BASH_REMATCH[2]}
fi

# parse variable "name", set domain if supplied
if [[ "$name" =~ ^(.*)@(.*)$ ]]; then
	name=${BASH_REMATCH[1]}
	domain=${BASH_REMATCH[2]}
fi

# construct "user"
if [ -z "$domain" ]; then
	user="$name"
else
	user="${name}@${domain}"
fi

# construct "issuer"
if [ -z "$issuer" ]; then
	uri="otpauth://${tokentype}/${user}?secret=${b32key}"
else
	uri="otpauth://${tokentype}/${issuer}:${user}?secret=${b32key}&issuer=${issuer}"
fi

echo "Key in Hex: $hexkey"
echo "Key in b32: $b32key (checksum: $b32checksum)"
echo
echo "URI: $uri"

# display QR Code on shell, if qrencode exists
[ -x "$(command -v qrencode)" ] && qrencode --type $qrtype "$uri"; 

# setup Yubikey, if tokentype is HOTP
if [ "$tokentype" == "hotp" ]; then
    echo ""
    echo "Yubikey setup (Slot 1):"
    echo "ykpersonalize -1 -ooath-hotp -ooath-imf=0 -ofixed= -oappend-cr -a${hexkey}"
    echo "Yubikey setup (Slot 2):"
    echo "ykpersonalize -2 -ooath-hotp -ooath-imf=0 -ofixed= -oappend-cr -a${hexkey}"
	algorithm="HOTP"
fi

if [ "$tokentype" == "totp" ]; then 
	algorithm="HOTP/T30"
fi

echo ""
echo "users.oath / otp.users configuration:"
echo "$algorithm $name - $hexkey"
